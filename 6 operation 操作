%
	--with-http_ssl_module 						//实现SSL加密功能
	--with-http_anth_basic_module					//实现网站的用户认证功能
	--with-stream       						//开启TCP/UDP代理模块
	--with-http_upstream_module					//定义集群服务器组模块
	--with-http_stub_status_module					//显示nginx服务状态
	--with-http_charset_module					//可以自定义网页编码（如UTF-8）
	--with-http_fastcgi_module					//转发请求给PHP服务
	--with-http_log_module						//记录用户请求的日志
	--with-http_gzip_module						//实现网站数据压缩功能
	--with-http_rewrite_module					//地址重写模块
###########################################################################################
###########################################################################################
搭建Nginx服务器  4.5

准备环境
	client	eth0	192.168.4.10
	proxy		eth0	192.168.4.5		192.168.2.5
	web1		eth1	192.168.2.100
	web2		eth1	192.168.2.200

源码安装nginx软件包  
	yum -y install  gcc pcre-devel openssl-devel
	useradd -s /sbin/nologin  nginx
	tar -xf  nginx-1.10.3.tar.gz
	cd  nginx-1.10.3.tar.gz
	./configure \   c     t  
	--prefix=/usr/local/nginx \          			//指定安装路径
	--user=nginx \                       			//指定用户
	--group=nginx \                      			//指定组
	--with-http_ssl_module              				//开启SSL加密功能
	make && make install

	ln -s /usr/local/nginx/sbin/nginx  /sbin/	        	//做软连接
	nginx –v                             			//查看版本
  	netstat -planut | grep nginx      				//查看端口信息

############################################################################################
用户认证
 
	vim  /usr/local/nginx/conf/nginx.conf
	server {
        	listen       80;
        	server_name  localhost;
        	auth_basic "xxxx:";					//认证提示符
        	auth_basic_user_file "/usr/local/nginx/xxx";	//认证密码文件

 	yum -y install  httpd-tools
 	htpasswd -c /usr/local/nginx/xxx dc				//创建密码文件
	htpasswd  /usr/local/nginx/xxx   tc				//追加用户，不使用-c选项
 	nginx -s reload							//重新加载配置文件

#############################################################################################
基于域名的虚拟主机

	vim /usr/local/nginx/conf/nginx.conf
	server {
		listen '192.168.1.1':80;					//IP地址与端口
		server_name  www.a.com;                     	//域名
		server_tokens off;					//隐藏版本号
	location / {
		root   html;						//网站根路径
		index  index.html index.html;				//默认首页		
	server {
		listen  80;
		server_name  www.b.com;
	location / { 
		root   www;
		index  index.html index.html;

	mkdir /usr/local/nginx/www					//创建网站根目录

	vim /etc/hosts
	192.168.4.5  www.a.com  www.b.com

	curl -I 192.168.1.5						//查看版本信息

############################################################################################
SSL虚拟主机

	cd   /usr/local/nginx/conf
	openssl genrsa  >  cert.key                            	//生成私钥
	openssl req -new -x509 -key cert.key > cert.pem      	//生成证书
	vim  /usr/local/nginx/conf/nginx.conf   
	server {
		listen  443 ssl;
		server_name          www.c.com;
		ssl_certificate      cert.pem;               	//这里是证书文件
		ssl_certificate_key  cert.key;               	//这里是私钥文件
		ssl_session_cache    shared:SSL:1m;
		ssl_session_timeout  5m;
		ssl_ciphers  HIGH:!aNULL:!MD5;
		ssl_prefer_server_ciphers  on;
	location / {
		root   html;
		index  index.html index.htm;

#################################################################################################
#################################################################################################
部署LNMP环境

 	yum -y install	gcc       openssl-devel    pcre-devel
 	   			mariadb   mariadb-devel    mariadb-server   
 	   			php       php-mysql        php-fpm

	useradd -s /sbin/nologin  nginx
 	tar -xf   nginx-1.12.2.tar.gz
 	cd nginx-1.12.2
 	./configure --user=nginx --group=nginx --with-http_ssl_module
	mariadb	php-fpm	nginx				//启动服务

构建LNMP平台

	查看php-fpm配置文件（实验中不需要修改该文件）
	vim /etc/php-fpm.d/www.conf
	[www]
	listen = 127.0.0.1:9000            			//PHP端口号
	pm.max_children = 32                			//最大进程数量
	pm.start_servers = 15               			//最小进程数量
	pm.min_spare_servers = 5            			//最少需要几个空闲着的进程
	pm.max_spare_servers = 32           			//最多允许几个进程处于空闲状态

	vim  /usr/local/nginx/conf/nginx.conf
	location  ~  \.php$  {
		root           html;
		fastcgi_pass   127.0.0.1:9000;			//将请求转发给本机9000端口
		fastcgi_index  index.php;
		include        fastcgi.conf;			//加载其他配置文件

	vim /usr/local/nginx/html/test.php
	<?php
	$i=123;
	echo $i;
	?>
	firefox http://192.168.4.5/test.php

#############################################################################################
地址重写

地址重写格式
		rewrite   			//旧地址 新地址 [选项]
		last      			//不再读其他rewrite
		break     			//不再读其他语句，结束请求
		redirect  			//临时重定向
		permament 			//永久重定向

访问a.html重定向到b.html
	server
		listen  80;
		rewrite /a.html  /b.html; 

访问a.html重定向到b.html（跳转地址栏）
	server {
      	listen       80;
		rewrite /a.html  /b.html  redirect;  

访问 192.168.4.5 的请求重定向至 www.baidu.com
	server {
    		listen       80;
		rewrite /  http://www.baidu.com/;

访问 192.168.4.5 下面子页面，重定向至 www.baidu.com下相同的页面
	server {
    		listen       80;
		rewrite /(.*)  http://www.baidu.com/$1;	//$1表示复制前面(.*)内容

实现curl和火狐访问相同链接返回页面不同
	echo "AAAAAA" > /usr/local/nginx/html/test.html
 	mkdir  -p       /usr/local/nginx/html/ooo/
 	echo "BBBBBB" > /usr/local/nginx/html/ooo/test.html

	server {
		if ($http_user_agent ~* firefox) {		//识别客户端浏览器
		rewrite /(.*)  /ooo/$1;}				~符号代表模糊匹配，*符号不区分大小写
											
 	firefox  http://192.168.4.5/test.html
 	curl     http://192.168.4.5/test.html

###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
web调度器

	http部署后端Web服务器 2.100  2.200
	vim/usr/local/nginx/conf/nginx.conf	
	upstream ooo {						//定义后端服务器集群
		ip_hash;      					//相同客户端访问相同服务器
		server 192.168.2.101 down;			//标记服务器已关机，不参与集群调度
		server 192.168.2.100 weight=1 max_fails=1 fail_timeout=30;	//定义集群服务器
		server 192.168.2.200 weight=2 max_fails=2 fail_timeout=30; }
	server {			  权重值     最大失败次数   失败超时时间
	location / {
		proxy_pass http://ooo;    			//将用户的请求转发给ooo集群
	curl http://192.168.4.5

###############################################################################################
TCP/UDP调度器

	./configure   
	--with-http_ssl_module    				//开启SSL加密功能
	--with-stream						//开启4层反向代理功能
	make && make install
	
	vim /usr/local/nginx/conf/nginx.conf
	stream {
		upstream xxx {
		server 192.168.2.100:22;            		//后端SSH服务器的IP和端口
		server 192.168.2.200:22; }
	server {
		listen 12345;                			//Nginx监听的端口
		proxy_connect_timeout 1s;    			//连接的超时时间
		proxy_timeout 3s;
		proxy_pass xxx;}}
	http { 
	ssh  192.168.4.5 -p 12345                  	//使用该命令多次访问查看效果

###############################################################################################
自定义报错页面

	vim /usr/local/nginx/conf/nginx.conf
	charset utf-8;						//支持中文
  	error_page   404  /404.html;				//自定义错误页面
  	echo 404 /usr/local/nginx/html/404.html		//生成错误页面

	常见http状态码
		200		一切正常
		301		永久重定向
		302		临时重定向
		401		用户名或密码错误
		403		禁止访问
		404		文件不存在
		414		请求URI头部过长
		500		服务器内部错误
		502		代表集群

###############################################################################################
查看服务器状态信息

	--with-http_stub_status_module				//开启状态页面模块
	vim /usr/local/nginx/conf/nginx.conf
	server {	
		location /xxx {					//定义状态页面
			stub_status on;
			allow IP;					//允许IP
			deny  IP;					//禁止IP

	curl  http://192.168.4.5/xxx
		Active connections				//当前活动的连接数量
		server Accepts					//接受客户端的连接总数量
		server Handled					//处理客户端的连接总数量
		server Requests					//客户端的请求数量
		Reading						//服务器正在读取客户端请求的数量
		Writing						//服务器正在写响应信息的数量
		Waiting						//多少客户端在等待服务器的响应
		PV	//点击量 cat access.log | wc -l
		UV	//用户量 awk '{IP[$1]++} END{for (i in IP){print IP [i],i}}' access.log

##############################################################################################
优化并发量

	ab -n 2000 -c 2000 http://192.168.4.5/		//高并发测试   -n次数 -c用户
	socket: Too many open files (24)          		//提示打开文件数量过多
	vim /usr/local/nginx/conf/nginx.conf			//修改配置文件，增加并发量
	worker_processes  2;                      		//与CPU核心数量一致
	events {
		worker_connections 65535;                 	//每个worker最大并发连接数
	优化内核参数
 	ulimit -a                        			//查看所有属性值
 	ulimit -Hn 100000                			//设置硬限制（临时规则）
 	ulimit -Sn 100000                			//设置软限制（临时规则)
 
	vim /etc/security/limits.conf				//设置永久生效
	*             soft         nofile      100000
	*             hard         nofile      100000
	用户或组    硬限制或软限制    需要限制的项目   限制的值
	ab -n 2000 -c 2000 http://192.168.4.5/		//4.5 测试

###############################################################################################
优化数据包头部缓存

	vim  lnmp_soft/buffer.sh 
	#!/bin/bash
	URL=http://192.168.4.5/index.html?
	for i in {1..5000}
	do
	    URL=${URL}v$i=$i
	done

	./buffer.sh							//提示头部信息过大 414
	vim /usr/local/nginx/conf/nginx.conf
	http {
		client_header_buffer_size  1k;			//默认请求包头信息的缓存    
		large_client_header_buffers 4 1m;		//数据包头部缓存个数与容量
	./buffer.sh							//不报错了

################################################################################################
浏览器本地缓存静态数据

	清空firefox本地缓存数据
	vim /usr/local/nginx/conf/nginx.conf				//定义对静态页面的缓存时间
	server {
	location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
		expires  30d; }              				//定义客户端缓存时间为30天

	cp /usr/share/backgrounds/day.jpg /usr/local/nginx/html
  	firefox http://192.168.4.5/day.jpg
	Firefox地址栏内输入about:cache，点击List Cache Entries可以查看缓存详细信息

#################################################################################################
日志切割

手动完成
	cd  /usr/local/nginx/logs/
	mv  access.log  xxx.log				
 	kill -USR1|10 $(cat nginx.pid)					//生成新的日志文件

自动完成
	vim  /usr/local/nginx/log.sh
	date=`date +%Y-%m-%d`
	i=/usr/local/nginx/logs
	mv  $i/access.log  $i/access-$date.log
	mv  $i/error.log   $i/error-$date.log
	kill -10 `cat $i/nginx.pid`

	chmod +x  /usr/local/nginx/log.sh
	crontab -e
	00 03 * * 5 /usr/local/nginx/log.sh

#################################################################################################
页面进行压缩处理

	http {
		gzip on;							//开启压缩,gzip为开源
		gzip_min_length 1000;					//1000 字节以下小文件不压缩
		gzip_comp_level 4;					//压缩比率范围 1~9
		gzip_types text/plain text/css text/xml ;} 	//对特定文件压缩，类型参考mime.types

##################################################################################################
服务器内存缓存					处理大量静态文件，可以将文件缓存在内存,访问会更快

	http { 
	open_file_cache  max=2000 inactive=20s;	//设置服务器最大缓存 2000 个文件，关闭 20 秒无请求的文件
			open_file_cache_valid  60s;	//文件的有效时间是 60 秒，60 秒后过期
			open_file_cache_min_uses 5;	//只有访问次数超过 5 次会被缓存
			open_file_cache_errors off;}	//内存不要报错

###################################################################################################
PHP的本地Session信息   
		Session			//存储在服务器端，保存用户名、登陆状态等信息。
		Cookies			//由服务器下发给客户端，保存在客户端的一个文件里,保存的内容：SessionID

	nginx 部署后端 Web 服务器,修改默认首页与动静分离 2.100 2.200 部署动态测试网页
	yum -y install	gcc		openssl-devel	pcre-devel
				mariadb	mariadb-devel	mariadb-server   
				php		php-mysql		php-fpm
	./configure  --with-http_ssl_module 
	make && make install
	nginx  mariadb  php-fpm				//启动服务

4.5	upstream xxx {
		server 192.168.2.100
		server 192.168.2.200 }
	server {
	location / {
		proxy_pass http://xxx;
		index  index.php index.html index.htm;

	curl  http://192.168.4.5       		//查看是否轮循

部署测试页面 2.100 2.200
	cd  lnmp_soft/php_scripts/
	tar -xf php-memcached-demo.tar.gz
	cd php-memcached-demo
	cp -r  *  /usr/local/nginx/html/
2.100	修改index.php和home.php,<body bgcolor=red>
2.200	修改index.php和home.php,<body bgcolor=blue>
1.254	firefox   http://192.168.4.5			//填写账户信息
2.100	cd  /var/lib/php/session/			//查看服务器本地的Session信息

###################################################################################################
搭建memcached数据库,KV数据库				数据存内存	

4.5	yum -y install memcached
	/usr/lib/systemd/system/memcached.service	//配置文件（不需要修改）
	/etc/sysconfig/memcached				//配置信息（不需要修改）
	systemctl  start  memcached			//启动服务
	netstat  -planut  |  grep memcached

	yum -y install telnet
	telnet  192.168.4.5  11211			//连接服务器测试,增、删、改、查等操作
	0 表示不压缩，180 为数据缓存时间，3 为需要存储的数据字节数量
	set name 0 180 3			//定义变量，变量名称为name
	aaa					//输入变量的值，值为plj                
	get name				//读取变量
	add www 0 180 3			//新建，www不存在则添加，存在则报错
	set www 0 180 3			//添加或替换变量
	replace www 0 180 3		//替换，www不存在则报错
	append www 0 180 3		//向变量中追加数据
	delete www				//删除变量
	flush_all				//清空所有
	quit					//退出登录  

##################################################################################################
LNMP+memcached

部署测试页面 2.100 2.200
	vim /usr/local/nginx/html/mem.php
	<?php
	$memcache=new Memcache;				//创建memcache对象
	$memcache->connect('192.168.4.5',11211) or die ('could not connect!!');
	$memcache->set('key','aaaaa');			//定义变量
	$get_values=$memcache->get('key');		//获取变量值
	echo $get_values;
	?>

	yum -y install  php-pecl-memcache		//为PHP添加memcache扩展
 	systemctl restart php-fpm
1.254	firefox http://192.168.1.6/mem.php

##################################################################################################
PHP实现session共享 2.100  2.200

	vim  /etc/php-fpm.d/www.conf
末尾	php_value[session.save_handler] = memcache			//定义Session信息存储在memcached服务器
	php_value[session.save_path] = "tcp://192.168.2.5:11211"//定义公共的memcached服务器在哪
	systemctl  restart  php-fpm

	firefox http://192.168.1.6			//只输入一次密码就行

##################################################################################################
##################################################################################################
部署Tomcat服务器

2.100	yum -y install java-1.8.0-openjdk  java-1.8.0-openjdk-headless 	//安装JDK环境
 	java -version 							//查看JAVA版本
	tar -xf  apache-tomcat-8.0.30.tar.gz				//安装Tomcat
	mv apache-tomcat-8.0.30  /usr/local/tomcat
 	ls /usr/local/tomcat
				bin/				//主程序目录
				lib/      			//库文件目录
				logs/  			//日志目录  
				temp/  			//临时目录
				work/				//自动编译目录jsp代码转换servlet
				conf/   			//配置文件目录
				webapps/ 			//页面目录
	/usr/local/tomcat/bin/startup.sh		//启动服务
	/usr/local/tomcat/bin/shutdown.sh		//关闭服务
	netstat -planut|grep java			//查看java监听的端口
	mv    /dev/random   /dev/random.bak		//如果启动非常慢，可用使用urandom替换random
	ln -s /dev/urandom  /dev/random
	strings /dev/random				//查看随机数
	firefox http://192.168.2.100:8080


	vim /usr/local/tomcat/webapps/ROOT/xx.jsp	//创建测试JSP页面
	<html>
	<body>
	<center>
	Now time is: <%=new java.util.Date()%>    	//显示服务器当前时间
	</center>
	</body>
	</html>

	firefox http://192.168.2.100:8080/xx.jsp

##################################################################################################
使用Tomcat部署虚拟主机

创建虚拟主机
2.100	vim /usr/local/tomcat/conf/server.xml
	<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true"></Host>
	<Host name="www.b.com" appBase="b" unpackWARS="true" autoDeploy="true"></Host>

创建页面根路径
	mkdir -p  /usr/local/tomcat/{a,b}/ROOT
	echo AAA  > /usr/local/tomcat/a/ROOT/index.html
	echo BBB  > /usr/local/tomcat/b/ROOT/index.html

	/usr/local/tomcat/bin/startup.sh		重启Tomcat服务器

	vim /etc/hosts
	192.168.2.100      www.a.com  www.b.com
 	firefox http://www.a.com:8080/
 	firefox http://www.b.com:8080/

##################################################################################################
修改www.b.com网站的首页目录为bbb

2.100	vim /usr/local/tomcat/conf/server.xml
	<Host name="www.b.com" appBase="b" unpackWARS="true" autoDeploy="true">
	<Context path="" docBase="bbb"/></Host>

	mkdir  /usr/local/tomcat/b/bbb
	echo BBBBBB > /usr/local/tomcat/b/base/index.html
	/usr/local/tomcat/bin/shutdown.sh
	/usr/local/tomcat/bin/startup.sh

	firefox  http://www.b.com:8080/

##################################################################################################
网页跳转	访问 www.a.com/aaa 打开	/var/www/html目录下的页面
	
2.100	vim /usr/local/tomcat/conf/server.xml
	<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
	<Context path="/aaa" docBase="/var/www/html/" /></Host>

	echo xxxx > /var/www/html/index.html
	/usr/local/tomcat/bin/shutdown.sh
	/usr/local/tomcat/bin/startup.sh

	firefox http://www.a.com:8080/aaa

##################################################################################################
配置Tomcat加密网站

创建私钥和证书文件
2.100	keytool -genkeypair -alias tomcat -keyalg RSA -keystore /usr/local/tomcat/keystore
			-genkeypair			//生成密钥对
			-alias tomcat		//密钥别名
			-keyalg RSA			//定义密钥算法为RSA算法
			-keystore			//定义密钥文件存储在:/usr/local/tomcat/keystore

创建支持加密连接的Connector
	<Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
	maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
	keystoreFile="/usr/local/tomcat/keystore" keystorePass="123456"	//添加这一行
	clientAuth="false" sslProtocol="TLS" />		//默认这段被注释掉了，打开添加密钥信息即可

	/usr/local/tomcat/bin/shutdown.sh
 	/usr/local/tomcat/bin/startup.sh

	firefox https://www.b.com:8443/

##################################################################################################
配置Tomcat日志

为每个虚拟主机设置不同的日志文件
	vim /usr/local/tomcat/conf/server.xml
	<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
	<Context path="/test" docBase="/var/www/html/" />
	<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
	prefix=" a_access" suffix=".txt"		//从默认虚拟主机中把Valve这段复制过来，修改下即可
	pattern="%h %l %u %t &quot;%r&quot; %s %b" /> </Host>

	/usr/local/tomcat/bin/shutdown.sh
	/usr/local/tomcat/bin/startup.sh
	/usr/local/tomcat/logs/catalina.2019-08-23.log		//tomcat主日志文件
	/usr/local/tomcat/logs/localhost_access_log.txt		//网站日志

##################################################################################################
配置Tomcat集群

4.5	vim /usr/local/nginx/conf/nginx.conf
	http {
		upstream xxx {
			server 192.168.2.100:8080;
			server 192.168.2.200:8080; }
   	location / {
			proxy_pass  http://xxx;
2.100	echo BBB > /usr/local/tomcat/webapps/ROOT/index.html
2.200	echo CCC > /usr/local/tomcat/webapps/ROOT/index.html
	/usr/local/tomcat/bin/startup.sh

	firefox http://192.168.1.6

#################################################################################################
Varnish缓存服务器(CDN)

2.100	搭建web服务器http

部署Varnish缓存服务器

4.54	yum -y install  gcc  pcre-devel  readline-devel  python-docutils
	useradd -s /sbin/nologin varnish
	tar -xf varnish-5.2.1.tar.gz
	cd varnish-5.2.1
	./configure
	make && make install
	cp  etc/example.vcl  /usr/local/etc/default.vcl		//复制启动脚本及配置文件
	vim  /usr/local/etc/default.vcl				//修改代理配置文件
	backend default {
	     .host = "192.168.2.100";
	     .port = "80";

	nginx -s stop
	varnishd -f /usr/local/etc/default.vcl			//启动服务
	varnishd -s malloc,128M						//定义内存作为缓存，空间为128M
	varnishd -s file,/var/lib/varnish_storage.bin,1G		//定义varnish使用文件作为缓存
 	varnishlog                     	//varnish日志
 	varnishncsa                    	//访问日志
	varnishadm  				//清空缓存数据
	varnish> ban req.url ~ .*

	curl http://192.168.4.5

##################################################################################################
##################################################################################################
Git版本控制
	clone       	//将远程服务器的仓库克隆到本地
	config      	//修改git配置
	add         	//添加修改到暂存区
	commit      	//提交修改到本的仓库
	push        	//提交修改到远程服务器

部署服务器 2.100
	yum -y install git				//安装软件
	git --version					//查看版本
	mkdir  /var/git
	git init --bare /var/git/aaa			//初始化一个空仓库

客户端测试 2.200
	yum -y install git
	git clone 192.168.2.100:/var/git/aaa		//克隆服务器仓库到本地

修改git配置(可以忽略)
	git config --global user.email "you@example.com"
	git config --global user.name "Your Name"
	git config --global push.default simple

	echo  AAAA > a.txt			//本地工作区对数据进行增删改查
	git status					//查看仓库中数据的状态
	git add .					//将工作区的修改提交到暂存区
	git commit -m "注释"			//将暂存区修改提交到本地仓库
	git push					//将本地仓库中的数据推送到远程服务器(web2将数据推送到web1)
	git pull					//将服务器上的数据更新到本地（web1的数据更新到web2）
	git log --oneline				//查看版本日志
	git reflog					//查看版本历史
	git reset --hard 301c0			//移动HEAD指针，将数据还原到任意版本
	git branch -v				//查看当前分支
	git branch aaa				//创建分支
	git checkout aaa				//切换分支
	git merge aaa				//合并到master分支

#################################################################################################
Git服务器

SSH服务器（支持读写操作）
2.100	git init --bare /var/git/xxx					//创建版本库
2.200	ssh-keygen -f /root/.ssh/id_rsa -N ''			//非交互生成SSH密钥
	ssh-copy-id  192.168.2.100
	git clone root@192.168.2.100:/var/git/xxx

Git服务器（只读的服务器）
2.100	yum -y install git-daemon
	git init --bare /var/git/xxx					//创建版本库
	vim /usr/lib/systemd/system/git@.service			//修改配置文件
	--base-path=/var/git
	systemctl  start  git.socket					//启动服务
2.200	git clone git://192.168.2.100/xxx

HTTP服务器（只读操作的服务器）
2.100	yum -y install gitweb httpd
	vim /etc/gitweb.conf
11	$projectroot = "/var/git";					//添加一行,设置仓库根目录
	git init --bare  /var/git/xxx					//创建版本仓库
	systemctl restart httpd
2.200	firefox http://192.168.2.100/git/xxx

##################################################################################################
##################################################################################################
制作RPM包
	yum -y install rpm-build
	rpmbuild -ba xxx					//自动生成的目录结构,会报错
	cp nginx-1.12.2.tar.gz /root/rpmbuild/SOURCES/
创建并修改SPEC配置文件
	vim /root/rpmbuild/SPECS/nginx.spec
	Name: nginx						//源码包软件名称
	Version: 1.12.2					//源码包软件的版本号
	Release: 100					//制作的RPM包版本号
	Summary: Nginx					//RPM软件的概述    
	#Group:
	License: GPL					//软件的协议
	URL: www.douniwan.com				//网址
	Source0: nginx-1.12.2.tar.gz			//源码包文件的全称
	#BuildRequires:					//制作RPM时的依赖关系
	#Requires:						//安装RPM时的依赖关系
	%description
	this is a web server				//软件的详细描述
	%post
	useradd nginx					//安装后脚本
	%prep
	%setup -q                            	//自动解压源码包，并cd进入目录
	%build
	./configure --with-stream			//需要什么模块添加什么
	make %{?_smp_mflags}
	%install
	make install DESTDIR=%{buildroot}
	%files
	%doc
	/usr/local/nginx/*				//对哪些文件与目录打包
	%changelog

	yum -y install  gcc  pcre-devel openssl-devel
	cd /root/rpmbuild/SPECS/
	rpmbuild -ba nginx.spec				//创建RPM软件包
	cd  /root/rpmbuild/RPMS/x86_64/
	yum -y install nginx-1.12.2-10.x86_64.rpm	//安装

###################################################################################################
###################################################################################################
###################################################################################################
配置GRE VPN				关闭防火墙

2.10	lsmod				//显示模块列表
	lsmod | grep ip_gre	//确定是否加载了gre模块
	modprobe ip_gre		//加载模块
	modinfo  ip_gre		//查看模块信息

	ip tunnel add tun0 mode gre remote 201.1.2.5(对方) local 201.1.2.10	//创建隧道,mode设置模式
	ip link set tun0 up								//启用隧道
	ip addr add 10.10.10.10/24(本机) peer 10.10.10.5/24(对方) dev tun0	//为VPN配置隧道IP
	ip a s              								//查看IP地址

2.5	modprobe  ip_gre
	ip tunnel add tun0 mode gre remote 201.1.2.10 local 201.1.2.5
	ip link set tun0 up
	ip addr add 10.10.10.5/24 peer 10.10.10.10/24 dev tun0
	ip a s
  	echo 1 > /proc/sys/net/ipv4/ip_forward					//开启路由转发
	ping 10.10.10.10

##################################################################################################
配置PPTP VPN

部署VPN服务器
	yum -y install pptpd-1.4.0-2.el7.x86_64.rpm
修改配置文件
 	vim /etc/pptpd.conf
  	localip 201.1.2.5                           //服务器本地IP
  	remoteip 192.168.3.1-50                     //分配给客户端的IP池

  	vim /etc/ppp/options.pptpd
  	require-mppe-128                            //使用MPPE加密数据
  	ms-dns 8.8.8.8                              //DNS服务器

  	vim /etc/ppp/chap-secrets                   //修改账户配置文件
  	jacob	  *	123456    *               	//用户名   服务器标记   密码   客户端

  	echo "1" > /proc/sys/net/ipv4/ip_forward    //开启路由转发
	启动服务  pptpd
	翻墙设置（非必需操作）
	iptables -t nat -A POSTROUTING -s 192.168.3.0/24  -j SNAT --to-source 201.1.2.5

步骤二：客户端设置

##################################################################################################
配置L2TP+IPSec VPN

准备网络
	windows        public2  201.1.2.20/24
	client         eth0     192.168.4.10/24
	               eth3     201.1.2.10/24

步骤一：部署IPSec服务
1）安装软件包
	yum -y install libreswan
2)新建IPSec密钥验证配置文件
 	vim /etc/ipsec.d/*.conf      新建该文件，参考lnmp_soft/vpn/myipsec.conf  
3)创建IPSec预定义共享密钥
 	vim /etc/ipsec.d/*.secrets
	201.1.2.10   %any:    PSK    "randpass"        //randpass为预共享密钥
                                                             //201.1.2.10是VPN服务器的IP
4)启动服务  ipsec
 	netstat -ntulp |grep pluto

步骤二：部署XL2TP服务
1）安装软件包
	yum localinstall xl2tpd-1.3.8-2.el7.x86_64.rpm
2) 修改xl2tp配置文件（修改3个配置文件的内容）

 	vim  /etc/xl2tpd/xl2tpd.conf                //修改主配置文件
 	ip range = 192.168.3.128-192.168.3.254      //分配给客户端的IP池
 	local ip = 201.1.2.10                       //VPN服务器的IP地址
	
 	vim /etc/ppp/options.xl2tpd                 //认证配置
 	require-mschap-v2                           //添加一行，强制要求认证
 	#crtscts                                    //注释或删除该行
 	#lock                                       //注释或删除该行

 	vim /etc/ppp/chap-secrets                   //修改密码文件
 	jacob   *       123456  *                   //账户名称   服务器标记   密码   客户端IP

3）启动服务  xl2tpd
	netstat  -ntulp |grep xl2tpd 
4）设置路由转发，防火墙
	echo "1" > /proc/sys/net/ipv4/ip_forward
5）翻墙设置（非必需操作）
	iptables -t nat -A POSTROUTING -s 192.168.3.0/24  -j SNAT --to-source 201.1.2.10

步骤二：客户端设置

	设置Windows注册表（不修改注册表，连接VPN默认会报789错误），具体操作如下：
	单击"开始"，单击"运行"，键入"regedit"，然后单击"确定"
	找到下面的注册表子项，然后单击它：
	HKEY_LOCAL_MACHINE\ System\CurrentControlSet\Services\Rasman\Parameters
	在"编辑"菜单上，单击"新建"->"DWORD值"
	在"名称"框中，键入"ProhibitIpSec"
	在"数值数据"框中，键入"1"，然后单击"确定"
	退出注册表编辑器，然后重新启动计算机
	连接VPN并测试网络连通性

##################################################################################################
##################################################################################################
